concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
library(reticulate)
install_miniconda()
use_miniconda(required = TRUE)
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
reticulate::repl_python()
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
import numpy as np
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
import numpy as np
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
x=as.array(sample.int(floor(10 * 0.9), 10, replace = TRUE))
len(x)
x = np.random.choice(floor(10 * 0.9), 10)
len(x)
x = np.random.choice(floor(10 * 0.9), 10)
len(x)
import numpy as np
from math import floor
x = np.random.choice(floor(10 * 0.9), 10)
len(x)
import numpy as np
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
import numpy as np
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
quit
n <- 100
# R's array will be casted as Python's numpy array
x <- as.array(sample.int(floor(n * 0.9), n, replace = TRUE))
y <- as.array(sample.int(floor(n * 0.9), n, replace = TRUE))
py$kendall_a(x, y)
cor(x, y, method = "kendall")
n <- 100
# R's array will be casted as Python's numpy array
x <- as.array(sample.int(floor(n * 0.9), n, replace = TRUE))
y <- as.array(sample.int(floor(n * 0.9), n, replace = TRUE))
py$kendall_b(x, y)
cor(x, y, method = "kendall")
reticulate::repl_python()
import numpy as np
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
import numpy as np
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
import numpy as np
def kendall_b(x, y):
n = len(x)
disconcordant_pairs = 0
concordant_pairs = 0
ties_x = 0
ties_y = 0
for i in range(n):
for j in range(i+1,n):
#check for concordant
if (x[i] > x[j]) and (y[i] > y[j]):
concordant_pairs += 1
elif (x[i] < x[j]) and (y[i] < y[j]):
concordant_pairs +=1
#check for disconcordant
elif (x[i] > x[j]) and (y[i] < y[j]):
disconcordant_pairs += 1
elif (x[i] < x[j]) and (y[i] > y[j]):
disconcordant_pairs += 1
#check for ties in X
elif (x[i] == x[j]):
ties_x  +=1
elif (y[i] == y[j]):
ties_y += 1
numerator = concordant_pairs - disconcordant_pairs
denominator = np.sqrt((concordant_pairs + disconcordant_pairs + ties_x)*(concordant_pairs + disconcordant_pairs + ties_y))
tau_b = numerator/denominator
return tau_b
import numpy as np
from math import floor
n = 100#00
x = np.random.choice(floor(n * 0.9), n)
y = np.random.choice(floor(n * 0.9), n)
kendall_a(x, y)
import numpy as np
from math import floor
n = 100#00
x = np.random.choice(floor(n * 0.9), n)
y = np.random.choice(floor(n * 0.9), n)
kendall_b(x, y)
quit
n <- 100
# R's array will be casted as Python's numpy array
x <- as.array(sample.int(floor(n * 0.9), n, replace = TRUE))
y <- as.array(sample.int(floor(n * 0.9), n, replace = TRUE))
py$kendall_b(x, y)
cor(x, y, method = "kendall")
n <- 100
# R's array will be casted as Python's numpy array
x <- as.array(sample.int(floor(n * 0.9), n, replace = TRUE))
y <- as.array(sample.int(floor(n * 0.9), n, replace = TRUE))
py$kendall_b(x, y)
cor(x, y, method = "kendall")
reticulate::repl_python()
import numpy as np
from math import floor
n = 100#00
x = np.random.choice(floor(n * 0.9), n)
y = np.random.choice(floor(n * 0.9), n)
kendall_b(x, y)
quit
install.packages(c("keras", "kernlab"))
knitr::include_graphics("fig18_1.png")
setwd("C:/Users/jwebb/OneDrive/Desktop/STA 141C/sta141c-notes-master/sta141c-notes-master")
knitr::include_graphics("fig18_1.png")
knitr::include_graphics("fig18_6.png")
knitr::include_graphics("dropout.png")
library(reticulate)
library(tidyverse)
library(keras)
install.packages('keras')
library(reticulate)
library(tidyverse)
library(keras)
install.packages('tensorflow')
library(reticulate)
library(tidyverse)
library(keras)
library(tensorflow)
use_miniconda("r-tensorflow", required = TRUE)
use_miniconda("r-tensorflow", required = TRUE)
library(reticulate)
use_miniconda(required = TRUE)
use_miniconda("r-tensorflow", required = TRUE)
uninstall(keras)
uninstall('keras')
remove.packages("keras", lib="~/R/win-library/3.6")
library(reticulate)
use_miniconda("r-tensorflow", required = TRUE)
use_miniconda("r-tensorflow", required = TRUE)
install_keras("conda", conda = reticulate:::miniconda_conda(), envname = "r-tensorflow")
install_keras("conda", conda = reticulate:::miniconda_conda(), envname = "r-tensorflow")
library(reticulate)
library(tidyverse)
library(keras)
install_miniconda()
library(Miniconda)
library(miniconda)
library(reticulate)
install_miniconda()
library(reticulate)
#install_miniconda()
use_miniconda("r-tensorflow", required = TRUE)
